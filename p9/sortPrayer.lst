     1                                  ; WILLEM WILCOX
     2                                  ; Program 9
     3                                  ; 11/13/23
     4                                  ; One day, the wheel is gonna catch me. I don't know when, 
     5                                  ; but I'll keep running until it does 
     6                                  
     7                                  ; Welcome to macro city baby! Time to get cookin'
     8                                  
     9                                  ; Prints to console
    10                                  %macro prt 2
    11                                      ; %1 = address of item
    12                                      ; %2 = length of item
    13                                      pusha
    14                                      
    15                                      mov eax, 4
    16                                      mov ebx, 1
    17                                      mov ecx, %1
    18                                      mov edx, %2
    19                                      int 80h
    20                                      
    21                                      popa
    22                                  %endmacro
    23                                  
    24                                  ; Prints the array
    25                                  %macro prtArray 2
    26                                      ; %1 = address of array
    27                                      ; %2 = length of array
    28                                      pusha
    29                                      
    30                                      mov edi, %2     ; set edi to numslen
    31                                      xor esi, esi    ; clear esi for use as counter
    32                                      mov ax, [%1]    ; set ax to nums address in memory
    33                                      mov ebx, %1
    34                                      call prtArrayLoop
    35                                      
    36                                      popa
    37                                  %endmacro
    38                                  
    39                                  ;;;; END MACROS ;;;;
    40                                  
    41                                  
    42                                  ;;;; START DATA ;;;;
    43                                  
    44                                  SECTION .data
    45                                  ; define data/variables here.  Think DB, DW, DD, DQ
    46                                  
    47                                  ;; Main Array
    48 00000000 D00730750000FFFF00-     nums:    dw 2000,30000,0,65535,0,1,2,3,100
    49 00000009 000100020003006400 
    50                                  numslen: EQU ($-nums)
    51                                  
    52                                  
    53                                  ; String place holder
    54 00000012 2020202020000A0000-     string:  dw "     ", 10, 0 
    55 0000001B 00                 
    56                                  
    57                                  ; Clear Screen
    58 0000001C 1B5B324A                cls:     db 1bh, '[2J'
    59                                  clsLen:  EQU ($-cls)
    60                                  
    61                                  ; New Line
    62 00000020 0A                      nl:    db 10
    63                                  nlLen:   EQU ($-nl)
    64                                  
    65                                  ;; Titles and Headers
    66 00000021 2A2A2A2A57696C6C73-     m1:    db "****Wills Wacky Array Sorter****"
    67 0000002A 205761636B79204172-
    68 00000033 72617920536F727465-
    69 0000003C 722A2A2A2A         
    70                                  m1Len: EQU ($-m1)
    71 00000041 4F726967696E616C20-     m2:    db "Original Array"
    72 0000004A 4172726179         
    73                                  m2Len: EQU ($-m2)
    74 0000004F 536F72746564204172-     m3:    db "Sorted Array"
    75 00000058 726179             
    76                                  m3Len: EQU ($-m3)
    77                                  
    78                                  SECTION .bss
    79                                  ; define uninitialized data here
    80                                  
    81                                  ;;;; END OF DATA ;;;;
    82                                  
    83                                  ;;;; START OF MAIN ;;;;
    84                                  
    85                                  SECTION .text
    86                                  global _main
    87                                  _main:
    88                                  
    89                                  prt cls, clsLen       ; clear the screen
    90                              <1> 
    91                              <1> 
    92 00000000 60                  <1>  pusha
    93                              <1> 
    94 00000001 B804000000          <1>  mov eax, 4
    95 00000006 BB01000000          <1>  mov ebx, 1
    96 0000000B B9[1C000000]        <1>  mov ecx, %1
    97 00000010 BA04000000          <1>  mov edx, %2
    98 00000015 CD80                <1>  int 80h
    99                              <1> 
   100 00000017 61                  <1>  popa
   101                                  prt cls, clsLen
   102                              <1> 
   103                              <1> 
   104 00000018 60                  <1>  pusha
   105                              <1> 
   106 00000019 B804000000          <1>  mov eax, 4
   107 0000001E BB01000000          <1>  mov ebx, 1
   108 00000023 B9[1C000000]        <1>  mov ecx, %1
   109 00000028 BA04000000          <1>  mov edx, %2
   110 0000002D CD80                <1>  int 80h
   111                              <1> 
   112 0000002F 61                  <1>  popa
   113                                  prt nl, nlLen         ; print new line
   114                              <1> 
   115                              <1> 
   116 00000030 60                  <1>  pusha
   117                              <1> 
   118 00000031 B804000000          <1>  mov eax, 4
   119 00000036 BB01000000          <1>  mov ebx, 1
   120 0000003B B9[20000000]        <1>  mov ecx, %1
   121 00000040 BA01000000          <1>  mov edx, %2
   122 00000045 CD80                <1>  int 80h
   123                              <1> 
   124 00000047 61                  <1>  popa
   125                                  
   126                                  prt m1, m1Len     ; print the title of the program
   127                              <1> 
   128                              <1> 
   129 00000048 60                  <1>  pusha
   130                              <1> 
   131 00000049 B804000000          <1>  mov eax, 4
   132 0000004E BB01000000          <1>  mov ebx, 1
   133 00000053 B9[21000000]        <1>  mov ecx, %1
   134 00000058 BA20000000          <1>  mov edx, %2
   135 0000005D CD80                <1>  int 80h
   136                              <1> 
   137 0000005F 61                  <1>  popa
   138                                  prt nl, nlLen         ; print new line
   139                              <1> 
   140                              <1> 
   141 00000060 60                  <1>  pusha
   142                              <1> 
   143 00000061 B804000000          <1>  mov eax, 4
   144 00000066 BB01000000          <1>  mov ebx, 1
   145 0000006B B9[20000000]        <1>  mov ecx, %1
   146 00000070 BA01000000          <1>  mov edx, %2
   147 00000075 CD80                <1>  int 80h
   148                              <1> 
   149 00000077 61                  <1>  popa
   150                                  
   151                                  prt m2, m2Len     ; print the header "Original array"
   152                              <1> 
   153                              <1> 
   154 00000078 60                  <1>  pusha
   155                              <1> 
   156 00000079 B804000000          <1>  mov eax, 4
   157 0000007E BB01000000          <1>  mov ebx, 1
   158 00000083 B9[41000000]        <1>  mov ecx, %1
   159 00000088 BA0E000000          <1>  mov edx, %2
   160 0000008D CD80                <1>  int 80h
   161                              <1> 
   162 0000008F 61                  <1>  popa
   163                                  prt nl, nlLen         ; print new line
   164                              <1> 
   165                              <1> 
   166 00000090 60                  <1>  pusha
   167                              <1> 
   168 00000091 B804000000          <1>  mov eax, 4
   169 00000096 BB01000000          <1>  mov ebx, 1
   170 0000009B B9[20000000]        <1>  mov ecx, %1
   171 000000A0 BA01000000          <1>  mov edx, %2
   172 000000A5 CD80                <1>  int 80h
   173                              <1> 
   174 000000A7 61                  <1>  popa
   175                                  
   176                                  ;;;;
   177                                  prtArray nums, numslen          ; prtArray function
   178                              <1> 
   179                              <1> 
   180 000000A8 60                  <1>  pusha
   181                              <1> 
   182 000000A9 BF12000000          <1>  mov edi, %2
   183 000000AE 31F6                <1>  xor esi, esi
   184 000000B0 66A1[00000000]      <1>  mov ax, [%1]
   185 000000B6 BB[00000000]        <1>  mov ebx, %1
   186 000000BB E862000000          <1>  call prtArrayLoop
   187                              <1> 
   188 000000C0 61                  <1>  popa
   189                                  
   190 000000C1 68[00000000]            push nums
   191 000000C6 6A12                    push numslen
   192 000000C8 E8B1000000              call sortArray	
   193                                  
   194                                  
   195                                  prt m3, m3Len     ; print the header "Sorted array"
   196                              <1> 
   197                              <1> 
   198 000000CD 60                  <1>  pusha
   199                              <1> 
   200 000000CE B804000000          <1>  mov eax, 4
   201 000000D3 BB01000000          <1>  mov ebx, 1
   202 000000D8 B9[4F000000]        <1>  mov ecx, %1
   203 000000DD BA0C000000          <1>  mov edx, %2
   204 000000E2 CD80                <1>  int 80h
   205                              <1> 
   206 000000E4 61                  <1>  popa
   207                                  prt nl, nlLen         ; print new line
   208                              <1> 
   209                              <1> 
   210 000000E5 60                  <1>  pusha
   211                              <1> 
   212 000000E6 B804000000          <1>  mov eax, 4
   213 000000EB BB01000000          <1>  mov ebx, 1
   214 000000F0 B9[20000000]        <1>  mov ecx, %1
   215 000000F5 BA01000000          <1>  mov edx, %2
   216 000000FA CD80                <1>  int 80h
   217                              <1> 
   218 000000FC 61                  <1>  popa
   219                                  
   220                                  ;;;;
   221                                  prtArray nums, numslen          ; prtArray function
   222                              <1> 
   223                              <1> 
   224 000000FD 60                  <1>  pusha
   225                              <1> 
   226 000000FE BF12000000          <1>  mov edi, %2
   227 00000103 31F6                <1>  xor esi, esi
   228 00000105 66A1[00000000]      <1>  mov ax, [%1]
   229 0000010B BB[00000000]        <1>  mov ebx, %1
   230 00000110 E80D000000          <1>  call prtArrayLoop
   231                              <1> 
   232 00000115 61                  <1>  popa
   233                                  ;;;;
   234                                  
   235                                  
   236                                  
   237                                  ; break
   238                                  lastBreak:
   239                                  
   240                                  ; Normal termination code
   241 00000116 B801000000              mov eax, 1
   242 0000011B BB00000000              mov ebx, 0
   243 00000120 CD80                    int 80h
   244                                  
   245                                  ;;;; END MAIN ;;;;
   246                                  
   247                                  prtArrayLoop:
   248 00000122 39FE                        cmp esi, edi            ; check if out of bounds
   249 00000124 7D2F                        jge exitLoop            ; if not OOB, continue
   250                                  
   251 00000126 57                          push edi               
   252 00000127 53                          push ebx
   253                                  
   254 00000128 BF[12000000]                mov edi, string         ; set edi to string address
   255 0000012D E824000000                  call intToStr           ; call to conversion function
   256                                      prt string, 14
   257                              <1> 
   258                              <1> 
   259 00000132 60                  <1>  pusha
   260                              <1> 
   261 00000133 B804000000          <1>  mov eax, 4
   262 00000138 BB01000000          <1>  mov ebx, 1
   263 0000013D B9[12000000]        <1>  mov ecx, %1
   264 00000142 BA0E000000          <1>  mov edx, %2
   265 00000147 CD80                <1>  int 80h
   266                              <1> 
   267 00000149 61                  <1>  popa
   268                                  	
   269 0000014A 5B                          pop ebx
   270 0000014B 5F                          pop edi                 ; restore counter
   271                                  
   272 0000014C 83C602                      add esi, 2              ; increment counter
   273 0000014F 668B041E                    mov ax, WORD[esi + ebx] 
   274                                  DEBUG:
   275 00000153 EBCD                        jmp prtArrayLoop
   276                                  
   277                                      exitLoop:
   278 00000155 C3                      ret
   279                                  
   280                                  intToStr:
   281 00000156 66BB0A00                    mov bx, 10      ; set bl to 10 for division
   282 0000015A 51                          push ecx
   283 0000015B 89F9                        mov ecx, edi
   284 0000015D 83C708                      add edi, 8      ; move edi to the last 0 in string
   285                                      convert:
   286                                  	;xor edx,edx
   287 00000160 66F7F3                          div bx          ; divide ax by 10, result in eax, remainder in edx
   288 00000163 6683C230                        add dx, '0'     ; convert remainder to ASCII
   289 00000167 66C7070000              	mov word[edi],0
   290 0000016C 668917                          mov [edi], dx   ; move ASCII char into end of edi
   291 0000016F 83EF02                  	sub edi, 2         ; move edi back a step in memory
   292 00000172 6631D2                          xor dx, dx      ; clear ah
   293 00000175 6683F800                        cmp ax,0     ; check if done 4 times
   294                                          
   295 00000179 75E5                            jnz convert     ; if not, continue
   296                                  
   297 0000017B 59                          pop ecx
   298 0000017C C3                      ret
   299                                  
   300                                  clearCurrentString:
   301                                  
   302 0000017D C3                      ret
   303                                  
   304                                  ; function args (array, length)
   305                                  sortArray:
   306                                  ; start reverseArrayMain
   307                                      ; preserve base pointer/address
   308 0000017E 55                          push ebp
   309 0000017F 89E5                        mov ebp, esp
   310                                  
   311                                      ; preserve registers
   312 00000181 50                          push eax
   313 00000182 53                          push ebx
   314 00000183 51                          push ecx
   315 00000184 52                          push edx
   316 00000185 56                          push esi
   317                                      ; end pushing/preserving
   318                                  
   319                                      ; dx now holds length of array
   320 00000186 8B5508                      mov edx,[ebp+8]
   321                                  
   322                                      ; bx points to end of array
   323 00000189 668B5D0C                    mov bx,WORD[ebp+12]
   324 0000018D 66035D08                    add bx,WORD[ebp+8]
   325                                  
   326                                  
   327                                  
   328                                      repeatloop:
   329                                      ; ax now points to start of the array
   330 00000191 8B450C                      mov eax,[ebp+12]
   331                                  
   332                                      ; adjust location for last item in unsorted portion
   333 00000194 83EB02                      sub ebx, 2
   334                                  
   335 00000197 83FB00                      cmp ebx, 0
   336 0000019A 7419                        jz endsort
   337                                  
   338                                      compare:
   339 0000019C 668B08                      	mov cx,WORD[eax]
   340 0000019F 663B4802                    	cmp cx, WORD[eax + 2]
   341 000001A3 7207                        	jb noswap
   342                                  
   343                                      	; swap
   344 000001A5 66874802                    	xchg cx, WORD[eax + 2]
   345 000001A9 668908                      	mov WORD[eax], cx
   346                                  
   347                                      	noswap:
   348 000001AC 83C002                      	add eax, 2
   349 000001AF 39D8                        	cmp eax, ebx
   350 000001B1 72E9                        	jb compare
   351                                  
   352 000001B3 EBDC                        	jmp repeatloop
   353                                  
   354                                      endsort:
   355                                  
   356                                      ; pop previously preserved registers and pointers/address
   357 000001B5 5E                          pop esi
   358 000001B6 5A                          pop edx
   359 000001B7 59                          pop ecx
   360 000001B8 5B                          pop ebx
   361 000001B9 58                          pop eax
   362 000001BA 5D                          pop ebp
   363                                      ; end popping
   364                                  
   365 000001BB C3                          ret
   366                                  
   367                                  
